# Azure ML Pipeline Definition (v2 YAML)
# Defines the sequence of steps for training the fraud detection model.


$schema: https://azuremlschemas.azureedge.net/latest/pipelineJob.schema.json
type: pipeline

display_name: Fraud_Detection_Training_Pipeline_MLTable
description: Pipeline to preprocess data (MLTable), train (XGBoost GridSearch), evaluate, and register a fraud detection model.
experiment_name: fraud-detection-training-mltable 

# --- Pipeline Inputs ---
inputs:
  prep_step_input_data:
    type: mltable 
    path: azureml:daily_raw_transactions_fraud@latest 
    mode: ro_mount 

  # Date range for *filtering* the loaded MLTable in prep step
  prep_output_start_date: "2025-06-11"
  prep_output_end_date: "2025-08-14"
  baseline_date_str: "2025-04-01" # Keep if prep.py uses it for time calculations

  # Anchor date and deltas for training splits (used *inside* train.py)
  anchor_date_str: "2025-07-25"
  delta_train: 7
  delta_delay: 7
  delta_assessment: 7
  n_folds: 4

  # Evaluation threshold
  deploy_threshold_value: 0.65

# --- Pipeline Outputs ---
outputs:
  prepared_data_asset_output:
    type: mltable # Output type is mltable
    mode: upload # Needs to be uploaded to be registered

  # Keep existing outputs
  trained_model_output:
    type: mlflow_model
    mode: upload
  evaluation_report_output:
    type: uri_folder
    mode: upload
  model_info_output:
     type: uri_folder
     mode: upload

# --- Pipeline Settings ---
settings:
  default_datastore: azureml:workspaceblobstore
  default_compute: azureml:cpu-cluster
  continue_on_step_failure: false

# --- Pipeline Jobs (Steps) ---
jobs:
  # 1. Preparation Step (UPDATED)
  prep_data:
    type: command
    name: prep_tabular_data
    display_name: Prepare Tabular Data (MLTable)
    description: Loads MLTable, applies transformations, outputs registered MLTable.
    inputs:
      # UPDATED: Use the new pipeline input
      input_tabular_data: ${{parent.inputs.prep_step_input_data}}
      # Keep date/baseline inputs if prep.py still uses them for filtering/calcs
      output_start_date: ${{parent.inputs.prep_output_start_date}}
      output_end_date: ${{parent.inputs.prep_output_end_date}}
      baseline_date_str: ${{parent.inputs.baseline_date_str}}
    outputs:
      # UPDATED: Output is now the prepared MLTable, map to pipeline output
      prepared_data_output:
        type: mltable # Explicitly declare type
        mode: upload # Ensure it's uploaded
        # Define name and version here to register the output directly
        name: prepared_fraud_data # Name of the data asset to register
        version: '1' # Version for the registered asset
        # Link to the pipeline output definition
        path: ${{parent.outputs.prepared_data_asset_output}}
    code: ../../../data-science/src
    command: >-
      python prep.py
      --input_tabular_data ${{inputs.input_tabular_data}} 
      --output_mltable_path ${{outputs.prepared_data_output}}
      --output_start_date ${{inputs.output_start_date}}
      --output_end_date ${{inputs.output_end_date}}
      --baseline_date_str ${{inputs.baseline_date_str}}
    environment: azureml:fraud-detection-train-env@latest

  # 2. Training Step (UPDATED Input)
  train_model:
    type: command
    name: train_fraud_model_mltable
    display_name: Train Model (from MLTable)
    description: Trains model using the prepared MLTable data asset.
    inputs:
      # UPDATED: Input is now the output MLTable from the prep step
      prepared_data: ${{parent.jobs.prep_data.outputs.prepared_data_output}} # Use output from prep_data
      # Keep anchor date and deltas for splitting logic within train.py
      anchor_date_str: ${{parent.inputs.anchor_date_str}}
      delta_train: ${{parent.inputs.delta_train}}
      delta_delay: ${{parent.inputs.delta_delay}}
      delta_assessment: ${{parent.inputs.delta_assessment}}
      n_folds: ${{parent.inputs.n_folds}}
      n_jobs: -1
      # REMOVED: train_load_start/end_date not needed as input is single MLTable
    outputs:
      model_output: ${{parent.outputs.trained_model_output}}
      test_data_output: # Output folder containing final_test_data.pkl (evaluate needs this)
          type: uri_folder
          mode: upload
    code: ../../../data-science/src
    command: >-
      python train.py
      --input_mltable_data ${{inputs.prepared_data}} # Changed argument name
      --model_output ${{outputs.model_output}}
      --test_data_output ${{outputs.test_data_output}}
      # Pass splitting parameters
      --anchor_date_str ${{inputs.anchor_date_str}}
      --delta_train ${{inputs.delta_train}}
      --delta_delay ${{inputs.delta_delay}}
      --delta_assessment ${{inputs.delta_assessment}}
      --n_folds ${{inputs.n_folds}}
      --n_jobs ${{inputs.n_jobs}}
      # REMOVED: --train_load_start/end_date
    environment: azureml:fraud-detection-train-env@latest

  # 3. Evaluation Step 
  evaluate_model:
    type: command
    name: evaluate_trained_model
    display_name: Evaluate Model Performance
    description: Evaluates the trained model on the test set and determines deploy flag.
    inputs:
      model_input: ${{parent.jobs.train_model.outputs.model_output}}
      test_data_folder: ${{parent.jobs.train_model.outputs.test_data_output}} # Still needs the pkl test split
      deploy_threshold_value: ${{parent.inputs.deploy_threshold_value}}
    outputs:
      evaluation_output: ${{parent.outputs.evaluation_report_output}}
    code: ../../../data-science/src
    command: >-
      python evaluate.py
      --model_input ${{inputs.model_input}}
      --test_data ${{inputs.test_data_folder}}
      --evaluation_output ${{outputs.evaluation_output}}
      --deploy_threshold_value ${{inputs.deploy_threshold_value}}
    environment: azureml:fraud-detection-train-env@latest

  # 4. Registration Step 
  register_model:
    type: command
    name: register_evaluated_model
    display_name: Register Model (if approved)
    description: Registers the model in the Azure ML workspace if deploy flag is set.
    inputs:
      model_path: ${{parent.jobs.train_model.outputs.model_output}}
      evaluation_output: ${{parent.jobs.evaluate_model.outputs.evaluation_output}}
      model_name: "fraud-detection-model" 
    outputs:
       model_info_output_path: ${{parent.outputs.model_info_output}}
    code: ../../../data-science/src
    command: >-
      python register.py
      --model_name ${{inputs.model_name}}
      --model_path ${{inputs.model_path}}
      --evaluation_output ${{inputs.evaluation_output}}
      --model_info_output_path ${{outputs.model_info_output_path}}
    environment: azureml:fraud-detection-train-env@latest

