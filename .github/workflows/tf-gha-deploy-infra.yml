# This file remains largely the same as the template.
# It reads config-infra-prod.yml and uses Terraform to deploy Azure resources.
# No specific changes needed for the fraud detection logic itself,
# assuming the resource requirements (AML workspace, storage, etc.) are standard.

name: tf-gha-deploy-infra.yml

on:
  workflow_dispatch:
env:
    config_env: 'none'
jobs:
  get-config:
      uses: Azure/mlops-templates/.github/workflows/read-yaml.yml@main
      with:
        file_name: config-infra-prod.yml
  test-terraform-state-deployment:
    needs: get-config
    uses: Azure/mlops-templates/.github/workflows/tf-gha-install-terraform.yml@main
    with:
      TFAction: 'apply'
      # Note: The original template had a 'set-env-branch' step which seems missing or simplified here.
      # Assuming config-infra-prod.yml is always used for this workflow dispatch.
      # dply_environment: ${{ needs.set-env-branch.outputs.config-file }} # This would need adjustment if branching logic is added
      dply_environment: 'prod' # Hardcoding for now based on file name
      location: ${{ needs.get-config.outputs.location }}
      namespace: ${{ needs.get-config.outputs.namespace }}
      postfix: ${{ needs.get-config.outputs.postfix }}
      environment: ${{ needs.get-config.outputs.environment }}
      enable_aml_computecluster: ${{ needs.get-config.outputs.enable_aml_computecluster == true }}
      enable_monitoring: ${{ needs.get-config.outputs.enable_monitoring == true  }}
      terraform_version: ${{ needs.get-config.outputs.terraform_version }}
      terraform_workingdir: ${{ needs.get-config.outputs.terraform_workingdir }}
      terraform_st_location: ${{ needs.get-config.outputs.terraform_st_location }}
      terraform_st_storage_account: ${{ needs.get-config.outputs.terraform_st_storage_account }}
      terraform_st_resource_group: ${{ needs.get-config.outputs.terraform_st_resource_group }}
      terraform_st_container_name: ${{ needs.get-config.outputs.terraform_st_container_name }}
      terraform_st_key: ${{ needs.get-config.outputs.terraform_st_key }}
      # terraform_plan_location: ${{ needs.get-config.outputs.location }} # Plan location might not be needed for apply
      # terraform_plan_vnet: "TBD" # VNet planning might be 
      terraform_plan_location: ${{ needs.get-config.outputs.location }} # Use the main location
      terraform_plan_vnet: "none" # Provide a placeholder if no specific VNet in plan
    secrets:
      azure_creds: ${{ secrets.AZURE_CREDENTIALS }}
      clientId: ${{ secrets.ARM_CLIENT_ID }}
      clientSecret: ${{ secrets.ARM_CLIENT_SECRET }}
      subscriptionId: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      tenantId: ${{ secrets.ARM_TENANT_ID }}
  # The deploy-azureml-resources step in the original template seems like a placeholder.
  # The actual deployment happens via the tf-gha-install-terraform.yml reusable workflow.
  # deploy-azureml-resources:
  #   runs-on: ubuntu-latest
  #   steps:
  #   - id: deploy-aml-workspace
  #     name: deploy-aml-workspace
  #     run: echo "OK"

